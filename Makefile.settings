#### STANDARD SETTINGS ####

# Filenames
TEST_COMPOSE_FILE := docker/test/docker-compose.yml
REL_COMPOSE_FILE := docker/release/docker-compose.yml

# Docker Compose Project Names
REL_PROJECT := $(PROJECT_NAME)$(BUILD_NUMBER)
TEST_PROJECT := $(REL_PROJECT)test

# Use these settings to specify a custom Docker registry
DOCKER_REGISTRY ?= docker.io

# WARNING: Set DOCKER_REGISTRY_AUTH to empty for Docker Hub
# Set DOCKER_REGISTRY_AUTH to auth endpoint for private Docker registry
DOCKER_REGISTRY_AUTH ?=

# Set shell
SHELL=/bin/bash -e -o pipefail

# App version settings
GIT_TIMESTAMP := $(shell echo $$(git log -1 --pretty='format:%cd' --date='format:%Y%m%d%H%M%S'))
GIT_HASH := $(shell echo $$(git rev-parse --short HEAD))
GIT_TAG := $(shell echo $$(git tag --points-at HEAD))
ifeq ($(BUILD_NUMBER),)
  APP_VERSION ?= $(GIT_TIMESTAMP).$(GIT_HASH)
else
  APP_VERSION ?= $(GIT_TIMESTAMP).$(GIT_HASH).$(BUILD_NUMBER)
endif
export APP_VERSION

# Database refresh settings
REFRESH_ARG = $(findstring refresh,$(ARGS))
export DB_REFRESH = $(if $(REFRESH_ARG),true,false)

# Full image names
TEST_IMAGE := $(DOCKER_REGISTRY)/$(ORG_NAME)/$(TEST_REPO_NAME):$(APP_VERSION)

# Using the before filter in Docker 1.12 will be a better approach
LOAD_IMAGE_EXISTS := $(strip $(shell docker images -q -f label=application=$(REPO_NAME)))
ifeq ($(DOCKER_REGISTRY),docker.io)
  SAVE_IMAGE_EXISTS := $(strip $(shell docker images -q $(ORG_NAME)/$(TEST_REPO_NAME):$(APP_VERSION)))
else
  SAVE_IMAGE_EXISTS := $(strip $(shell docker images -q $(TEST_IMAGE)))
endif

# Networking settings
export NETWORK_NAME := docker_workflow
NETWORK_SUBNET := 192.168.215.0/24
NETWORK_GW := 192.168.215.1
NETWORK_ID := $(shell docker network ls -f name=$(NETWORK_NAME) -q)

# Docker machine settings
DOCKER_MACHINE_NAME := $(shell if docker-machine active > /dev/null 2>&1 ; then echo $$(docker-machine active); fi)
ifneq ($(DOCKER_MACHINE_NAME),)
  DOCKER_MACHINE_IP := $(shell docker-machine ip $(DOCKER_MACHINE_NAME))
else
  DOCKER_MACHINE_IP := \<docker-host\>
endif

# Cosmetics
RED := "\e[1;31m"
YELLOW := "\e[1;33m"
NC := "\e[0m"

# Shell Functions
INFO := @bash -c '\
  printf $(YELLOW); \
  echo "=> $$1"; \
  printf $(NC)' SOME_VALUE
WARNING := @bash -c '\
  printf $(RED); \
  echo "WARNING: $$1"; \
  printf $(NC)' SOME_VALUE

# Arguments
NOPULL_ARG = $(findstring nopull,$(ARGS))
VERBOSE_ARG = $(findstring verbose,$(ARGS))
RELEASE_ARGS = -p $(REL_PROJECT) -f $(REL_COMPOSE_FILE) $(VERBOSE_FLAG)
TEST_ARGS = -p $(TEST_PROJECT) -f $(TEST_COMPOSE_FILE) $(VERBOSE_FLAG)

# Flags
VERBOSE_FLAG = $(if $(VERBOSE_ARG),--verbose,)
NOPULL_FLAG = $(if $(NOPULL_ARG),,--pull)

# Image and Repository Tag introspection functions
# Syntax: $(call get_image_id,<docker-compose-environment>,<service-name>)
# Syntax: $(call get_repo_tags,<docker-compose-environment>,<service-name>,<fully-qualified-image-name>)
#
get_container_id = $$(docker-compose $(1) ps -q $(2))
get_image_id = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ARGS docker inspect -f '{{ .Image }}' ARGS)
filter_repo_tags = $(if $(findstring docker.io,$(1)),$(subst docker.io/,,$(1))[^[:space:]|\$$]*,$(1)[^[:space:]|\$$]*)
get_repo_tags = $$(echo $(call get_image_id,$(1),$(2)) | xargs -I ID docker inspect -f '{{range .RepoTags}}{{.}} {{end}}' ID | grep -oh "$(call filter_repo_tags,$(3))" | xargs)

# Port introspection functions
# Syntax: $(call get_port_mapping,<docker-compose-environment>,<service-name>,<internal-port>)
#
get_raw_port_mapping = $$(docker-compose $(1) ps -q $(2) | xargs -I ID docker port ID $(3))
get_port_mapping = $$(echo $$(IFS=':' read -r -a array <<< "$(call get_raw_port_mapping,$(1),$(2),$(3))" && echo "$${array[1]}"))

# Check and Inspect Logic
INSPECT := $$(docker-compose -p $$1 -f $$2 ps -q $$3 | xargs -I ARGS docker inspect -f "{{ .State.ExitCode }}" ARGS)

CHECK := @bash -c '\
  if [[ $(INSPECT) -ne 0 ]]; \
  then exit $(INSPECT); fi' VALUE

# Extract extra arguments
ifeq ($(firstword $(MAKECMDGOALS)),$(filter $(firstword $(MAKECMDGOALS)),release test clean database snapshot demo))
  ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  $(eval $(ARGS):;@:)
endif

# Extract tag arguments
ifeq ($(firstword $(MAKECMDGOALS)),$(filter $(firstword $(MAKECMDGOALS)),tag))
  TAG_ARGS_RAW := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  ifeq ($(TAG_ARGS_RAW),)
    $(error You must specify a tag)
  endif
  TAG_ARGS += $(foreach tag,$(TAG_ARGS_RAW),$(shell echo $(tag) | sed -e 's/[^a-zA-Z0-9\.\-]/_/g'))
  $(eval $(TAG_ARGS_RAW):;@:)
endif

# Extract save/load path
ifeq ($(firstword $(MAKECMDGOALS)),$(filter $(firstword $(MAKECMDGOALS)),save load))
  SAVE_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  ifneq ($(SAVE_ARGS),)
    SAVE_PATH := $(firstword $(SAVE_ARGS))
    ifneq (,$(findstring s3://,$(SAVE_PATH)))
      AWS_SAVE_PATH := true
    endif
  else
    SAVE_PATH := .
  endif
endif

SAVE_PATH := $(shell echo $(SAVE_PATH) | sed 's:/*$$::')
SAVE_CMD := $(if $(AWS_SAVE_PATH),| aws s3 cp - $(SAVE_PATH),> $(SAVE_PATH))
TEST_SAVE_CMD := docker save $(TEST_IMAGE) $$(docker history -q $(TEST_IMAGE) | grep -v \<missing\>) | lbzip2 -c $(SAVE_CMD)/$(TEST_REPO_NAME).bz2
TEST_LOAD_CMD := $(if $(AWS_SAVE_PATH),aws s3 cp $(SAVE_PATH)/$(TEST_REPO_NAME).bz2 - | lbunzip2 | docker load,lbunzip2 <$(SAVE_PATH)/$(TEST_REPO_NAME).bz2 | docker load)
TEST_LOAD_EXISTS := $(if $(AWS_SAVE_PATH),$$(aws s3 ls $(SAVE_PATH)/$(TEST_REPO_NAME).bz2),-f $(SAVE_PATH)/$(TEST_REPO_NAME).bz2)
TEST_LOAD_MISSING := $(shell [[ $(TEST_LOAD_EXISTS) ]] || echo 1)

# Extract compose arguments
ifeq (compose,$(firstword $(MAKECMDGOALS)))
  COMPOSE_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  $(eval $(COMPOSE_ARGS):;@:)
endif

# Extract compose arguments
ifeq (dcompose,$(firstword $(MAKECMDGOALS)))
  DCOMPOSE_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  $(eval $(DCOMPOSE_ARGS):;@:)
endif